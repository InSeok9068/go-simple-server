// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO
    diary (
        uid,
        content,
        date,
        created,
        updated
    )
VALUES (
        ?,
        ?,
        ?,
        --         strftime('%Y%m%d', 'now', 'localtime'),
        datetime('now', 'localtime'),
        datetime('now', 'localtime')
    ) RETURNING id, uid, date, content, ai_feedback, ai_image, created, updated
`

type CreateDiaryParams struct {
	Uid     string
	Content string
	Date    string
}

func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary, arg.Uid, arg.Content, arg.Date)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createPushKey = `-- name: CreatePushKey :exec
INSERT INTO
    push_key (uid, token, created, updated)
VALUES (
        ?,
        ?,
        datetime('now', 'localtime'),
        datetime('now', 'localtime')
    )
`

type CreatePushKeyParams struct {
	Uid   string
	Token string
}

func (q *Queries) CreatePushKey(ctx context.Context, arg CreatePushKeyParams) error {
	_, err := q.db.ExecContext(ctx, createPushKey, arg.Uid, arg.Token)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
    user (
        uid,
        name,
        email,
        created,
        updated
    )
VALUES (
        ?,
        ?,
        ?,
        datetime('now', 'localtime'),
        datetime('now', 'localtime')
    )
`

type CreateUserParams struct {
	Uid   string
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Uid, arg.Name, arg.Email)
	return err
}

const deleteDiary = `-- name: DeleteDiary :exec
DELETE FROM diary WHERE id = ?
`

func (q *Queries) DeleteDiary(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDiary, id)
	return err
}

const getDiary = `-- name: GetDiary :one

SELECT id, uid, date, content, ai_feedback, ai_image, created, updated FROM diary WHERE date = ? AND uid = ? LIMIT 1
`

type GetDiaryParams struct {
	Date string
	Uid  string
}

// sqlc generate -f ./projects/deario/sqlc.yaml
func (q *Queries) GetDiary(ctx context.Context, arg GetDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiary, arg.Date, arg.Uid)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getDiaryRandom = `-- name: GetDiaryRandom :one
SELECT id, uid, date, content, ai_feedback, ai_image, created, updated
FROM diary
WHERE
    date IS NOT NULL
    AND uid = ?
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetDiaryRandom(ctx context.Context, uid string) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiaryRandom, uid)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPushKey = `-- name: GetPushKey :one
SELECT id, uid, token, created, updated FROM push_key WHERE uid = ? LIMIT 1
`

func (q *Queries) GetPushKey(ctx context.Context, uid string) (PushKey, error) {
	row := q.db.QueryRowContext(ctx, getPushKey, uid)
	var i PushKey
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Token,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uid, name, email, created, updated FROM user WHERE uid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Name,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listDiarys = `-- name: ListDiarys :many
SELECT id, uid, date, content, ai_feedback, ai_image, created, updated
FROM diary
WHERE
    uid = ?
ORDER BY created desc
LIMIT 7
OFFSET ((? - 1) * 7)
`

type ListDiarysParams struct {
	Uid     string
	Column2 interface{}
}

func (q *Queries) ListDiarys(ctx context.Context, arg ListDiarysParams) ([]Diary, error) {
	rows, err := q.db.QueryContext(ctx, listDiarys, arg.Uid, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diary
	for rows.Next() {
		var i Diary
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Date,
			&i.Content,
			&i.AiFeedback,
			&i.AiImage,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiary = `-- name: UpdateDiary :one
UPDATE diary
SET
    content = ?,
    updated = datetime('now')
WHERE
    id = ? RETURNING id, uid, date, content, ai_feedback, ai_image, created, updated
`

type UpdateDiaryParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateDiary(ctx context.Context, arg UpdateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, updateDiary, arg.Content, arg.ID)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateDiaryOfAiFeedback = `-- name: UpdateDiaryOfAiFeedback :exec
UPDATE diary
SET
    ai_feedback = ?,
    ai_image = ?,
    updated = datetime('now')
WHERE
    id = ?
`

type UpdateDiaryOfAiFeedbackParams struct {
	AiFeedback string
	AiImage    string
	ID         string
}

func (q *Queries) UpdateDiaryOfAiFeedback(ctx context.Context, arg UpdateDiaryOfAiFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, updateDiaryOfAiFeedback, arg.AiFeedback, arg.AiImage, arg.ID)
	return err
}

const updatePushKey = `-- name: UpdatePushKey :exec
UPDATE push_key
SET
    token = ?,
    updated = datetime('now')
WHERE
    uid = ?
`

type UpdatePushKeyParams struct {
	Token string
	Uid   string
}

func (q *Queries) UpdatePushKey(ctx context.Context, arg UpdatePushKeyParams) error {
	_, err := q.db.ExecContext(ctx, updatePushKey, arg.Token, arg.Uid)
	return err
}
