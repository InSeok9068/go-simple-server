// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO diarys (uid, content, date, created, updated)
VALUES (?,
        ?,
        ?,
        datetime('now', 'localtime'),
        datetime('now', 'localtime'))
RETURNING content, created, date, id, uid, updated, aifeedback
`

type CreateDiaryParams struct {
	Uid     string
	Content string
	Date    string
}

// strftime('%Y%m%d', 'now', 'localtime'),
func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary, arg.Uid, arg.Content, arg.Date)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
		&i.Aifeedback,
	)
	return i, err
}

const createDiarySetting = `-- name: CreateDiarySetting :exec
INSERT INTO diary_settings (uid, random_range_days, created, updated)
VALUES (?,
        ?,
        datetime('now', 'localtime'),
        datetime('now', 'localtime'))
`

type CreateDiarySettingParams struct {
	Uid             string
	RandomRangeDays int64
}

func (q *Queries) CreateDiarySetting(ctx context.Context, arg CreateDiarySettingParams) error {
	_, err := q.db.ExecContext(ctx, createDiarySetting, arg.Uid, arg.RandomRangeDays)
	return err
}

const createPushKey = `-- name: CreatePushKey :exec
INSERT INTO push_keys (uid, token, created, updated)
VALUES (?,
        ?,
        datetime('now', 'localtime'),
        datetime('now', 'localtime'))
`

type CreatePushKeyParams struct {
	Uid   string
	Token string
}

func (q *Queries) CreatePushKey(ctx context.Context, arg CreatePushKeyParams) error {
	_, err := q.db.ExecContext(ctx, createPushKey, arg.Uid, arg.Token)
	return err
}

const deleteDiary = `-- name: DeleteDiary :exec
DELETE
FROM diarys
WHERE id = ?
`

func (q *Queries) DeleteDiary(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDiary, id)
	return err
}

const getDiary = `-- name: GetDiary :one

SELECT content, created, date, id, uid, updated, aifeedback
FROM diarys
WHERE date = ?
  AND uid = ?
LIMIT 1
`

type GetDiaryParams struct {
	Date string
	Uid  string
}

// sqlc generate -f ./projects/deario/sqlc.yaml
func (q *Queries) GetDiary(ctx context.Context, arg GetDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiary, arg.Date, arg.Uid)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
		&i.Aifeedback,
	)
	return i, err
}

const getDiaryRandom = `-- name: GetDiaryRandom :one
SELECT content, created, date, id, uid, updated, aifeedback
FROM diarys
WHERE date >= ?
  AND uid = ?
ORDER BY RANDOM()
LIMIT 1
`

type GetDiaryRandomParams struct {
	Date string
	Uid  string
}

func (q *Queries) GetDiaryRandom(ctx context.Context, arg GetDiaryRandomParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiaryRandom, arg.Date, arg.Uid)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
		&i.Aifeedback,
	)
	return i, err
}

const getDiarySetting = `-- name: GetDiarySetting :one
SELECT id, uid, random_range_days, created, updated
FROM diary_settings
WHERE uid = ?
LIMIT 1
`

func (q *Queries) GetDiarySetting(ctx context.Context, uid string) (DiarySetting, error) {
	row := q.db.QueryRowContext(ctx, getDiarySetting, uid)
	var i DiarySetting
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.RandomRangeDays,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPushKey = `-- name: GetPushKey :one
SELECT created, id, token, uid, updated
FROM push_keys
WHERE uid = ?
LIMIT 1
`

func (q *Queries) GetPushKey(ctx context.Context, uid string) (PushKey, error) {
	row := q.db.QueryRowContext(ctx, getPushKey, uid)
	var i PushKey
	err := row.Scan(
		&i.Created,
		&i.ID,
		&i.Token,
		&i.Uid,
		&i.Updated,
	)
	return i, err
}

const listDiarys = `-- name: ListDiarys :many
SELECT content, created, date, id, uid, updated, aifeedback
FROM diarys
WHERE uid = ?
ORDER BY created desc
LIMIT 7 OFFSET ((? - 1) * 7)
`

type ListDiarysParams struct {
	Uid     string
	Column2 interface{}
}

func (q *Queries) ListDiarys(ctx context.Context, arg ListDiarysParams) ([]Diary, error) {
	rows, err := q.db.QueryContext(ctx, listDiarys, arg.Uid, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diary
	for rows.Next() {
		var i Diary
		if err := rows.Scan(
			&i.Content,
			&i.Created,
			&i.Date,
			&i.ID,
			&i.Uid,
			&i.Updated,
			&i.Aifeedback,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiary = `-- name: UpdateDiary :one
UPDATE diarys
SET content = ?,
    updated = datetime('now')
WHERE id = ?
RETURNING content, created, date, id, uid, updated, aifeedback
`

type UpdateDiaryParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateDiary(ctx context.Context, arg UpdateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, updateDiary, arg.Content, arg.ID)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
		&i.Aifeedback,
	)
	return i, err
}

const updateDiaryOfAiFeedback = `-- name: UpdateDiaryOfAiFeedback :exec
UPDATE diarys
SET aiFeedback = ?,
    updated    = datetime('now')
WHERE id = ?
`

type UpdateDiaryOfAiFeedbackParams struct {
	Aifeedback string
	ID         string
}

func (q *Queries) UpdateDiaryOfAiFeedback(ctx context.Context, arg UpdateDiaryOfAiFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, updateDiaryOfAiFeedback, arg.Aifeedback, arg.ID)
	return err
}

const updateDiarySettingRange = `-- name: UpdateDiarySettingRange :exec
UPDATE diary_settings
SET random_range_days = ?,
    updated           = datetime('now')
WHERE uid = ?
`

type UpdateDiarySettingRangeParams struct {
	RandomRangeDays int64
	Uid             string
}

func (q *Queries) UpdateDiarySettingRange(ctx context.Context, arg UpdateDiarySettingRangeParams) error {
	_, err := q.db.ExecContext(ctx, updateDiarySettingRange, arg.RandomRangeDays, arg.Uid)
	return err
}

const updatePushKey = `-- name: UpdatePushKey :exec
UPDATE push_keys
SET token   = ?,
    updated = datetime('now')
WHERE uid = ?
`

type UpdatePushKeyParams struct {
	Token string
	Uid   string
}

func (q *Queries) UpdatePushKey(ctx context.Context, arg UpdatePushKeyParams) error {
	_, err := q.db.ExecContext(ctx, updatePushKey, arg.Token, arg.Uid)
	return err
}
