// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO diarys (uid, content, date, created, updated)
VALUES (?,
        ?,
        strftime('%Y%m%d', 'now', 'localtime'),
        datetime('now', 'localtime'),
        datetime('now', 'localtime'))
RETURNING content, created, date, id, uid, updated
`

type CreateDiaryParams struct {
	Uid     string
	Content string
}

func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary, arg.Uid, arg.Content)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
	)
	return i, err
}

const getDiary = `-- name: GetDiary :one
SELECT content, created, date, id, uid, updated
FROM diarys
WHERE date = ?
  AND uid = ?
LIMIT 1
`

type GetDiaryParams struct {
	Date string
	Uid  string
}

func (q *Queries) GetDiary(ctx context.Context, arg GetDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiary, arg.Date, arg.Uid)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
	)
	return i, err
}

const updateDiary = `-- name: UpdateDiary :one
UPDATE diarys
set content = ?,
    updated = datetime('now')
WHERE id = ?
RETURNING content, created, date, id, uid, updated
`

type UpdateDiaryParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateDiary(ctx context.Context, arg UpdateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, updateDiary, arg.Content, arg.ID)
	var i Diary
	err := row.Scan(
		&i.Content,
		&i.Created,
		&i.Date,
		&i.ID,
		&i.Uid,
		&i.Updated,
	)
	return i, err
}
