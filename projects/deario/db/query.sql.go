// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO
    diary (uid, content, date)
VALUES (?, ?, ?) RETURNING id, uid, date, content, ai_feedback, ai_image, created, updated, mood, image_url1, image_url2, image_url3
`

type CreateDiaryParams struct {
	Uid     string
	Content string
	Date    string
}

func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary, arg.Uid, arg.Content, arg.Date)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
		&i.Mood,
		&i.ImageUrl1,
		&i.ImageUrl2,
		&i.ImageUrl3,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO user (uid, name, email) VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Uid   string
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Uid, arg.Name, arg.Email)
	return err
}

const deleteDiary = `-- name: DeleteDiary :exec
DELETE FROM diary WHERE id = ?
`

func (q *Queries) DeleteDiary(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDiary, id)
	return err
}

const getDiary = `-- name: GetDiary :one

SELECT id, uid, date, content, ai_feedback, ai_image, created, updated, mood, image_url1, image_url2, image_url3 FROM diary WHERE date = ? AND uid = ? LIMIT 1
`

type GetDiaryParams struct {
	Date string
	Uid  string
}

// sqlc generate -f ./projects/deario/sqlc.yaml
func (q *Queries) GetDiary(ctx context.Context, arg GetDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiary, arg.Date, arg.Uid)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
		&i.Mood,
		&i.ImageUrl1,
		&i.ImageUrl2,
		&i.ImageUrl3,
	)
	return i, err
}

const getDiaryRandom = `-- name: GetDiaryRandom :one
SELECT id, uid, date, content, ai_feedback, ai_image, created, updated, mood, image_url1, image_url2, image_url3
FROM diary
WHERE
    date IS NOT NULL
    AND uid = ?
    AND date >= ?
ORDER BY RANDOM()
LIMIT 1
`

type GetDiaryRandomParams struct {
	Uid  string
	Date string
}

func (q *Queries) GetDiaryRandom(ctx context.Context, arg GetDiaryRandomParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, getDiaryRandom, arg.Uid, arg.Date)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
		&i.Mood,
		&i.ImageUrl1,
		&i.ImageUrl2,
		&i.ImageUrl3,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uid, name, email, created, updated FROM user WHERE uid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Name,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserSetting = `-- name: GetUserSetting :one
SELECT uid, is_push, push_token, push_time, random_range, created, updated FROM user_setting WHERE uid = ? LIMIT 1
`

func (q *Queries) GetUserSetting(ctx context.Context, uid string) (UserSetting, error) {
	row := q.db.QueryRowContext(ctx, getUserSetting, uid)
	var i UserSetting
	err := row.Scan(
		&i.Uid,
		&i.IsPush,
		&i.PushToken,
		&i.PushTime,
		&i.RandomRange,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listDiaryDatesByMonth = `-- name: ListDiaryDatesByMonth :many
SELECT date
FROM diary
WHERE
    uid = ?
    AND substr(date, 1, 6) = ?
ORDER BY date
`

type ListDiaryDatesByMonthParams struct {
	Uid  string
	Date string
}

func (q *Queries) ListDiaryDatesByMonth(ctx context.Context, arg ListDiaryDatesByMonthParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listDiaryDatesByMonth, arg.Uid, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var date string
		if err := rows.Scan(&date); err != nil {
			return nil, err
		}
		items = append(items, date)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiarys = `-- name: ListDiarys :many
SELECT id, uid, date, content, ai_feedback, ai_image, created, updated, mood, image_url1, image_url2, image_url3
FROM diary
WHERE
    uid = ?
ORDER BY created desc
LIMIT 7
OFFSET ((? - 1) * 7)
`

type ListDiarysParams struct {
	Uid     string
	Column2 interface{}
}

func (q *Queries) ListDiarys(ctx context.Context, arg ListDiarysParams) ([]Diary, error) {
	rows, err := q.db.QueryContext(ctx, listDiarys, arg.Uid, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diary
	for rows.Next() {
		var i Diary
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Date,
			&i.Content,
			&i.AiFeedback,
			&i.AiImage,
			&i.Created,
			&i.Updated,
			&i.Mood,
			&i.ImageUrl1,
			&i.ImageUrl2,
			&i.ImageUrl3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPushTargets = `-- name: ListPushTargets :many
SELECT
    uid,
    push_token,
    push_time,
    random_range
FROM user_setting
WHERE
    is_push = 1
    AND push_token != ''
    AND push_time != ''
`

type ListPushTargetsRow struct {
	Uid         string
	PushToken   string
	PushTime    string
	RandomRange int64
}

func (q *Queries) ListPushTargets(ctx context.Context) ([]ListPushTargetsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPushTargets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPushTargetsRow
	for rows.Next() {
		var i ListPushTargetsRow
		if err := rows.Scan(
			&i.Uid,
			&i.PushToken,
			&i.PushTime,
			&i.RandomRange,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const monthlyDiaryCount = `-- name: MonthlyDiaryCount :many
WITH
    monthly AS (
        SELECT substr(date, 1, 6) AS month, COUNT(*) AS count
        FROM diary
        WHERE
            uid = ?
        GROUP BY
            substr(date, 1, 6)
        ORDER BY month DESC
        LIMIT 6
    )
SELECT month, count
FROM monthly
ORDER BY month
`

type MonthlyDiaryCountRow struct {
	Month string
	Count int64
}

func (q *Queries) MonthlyDiaryCount(ctx context.Context, uid string) ([]MonthlyDiaryCountRow, error) {
	rows, err := q.db.QueryContext(ctx, monthlyDiaryCount, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonthlyDiaryCountRow
	for rows.Next() {
		var i MonthlyDiaryCountRow
		if err := rows.Scan(&i.Month, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const monthlyMoodCount = `-- name: MonthlyMoodCount :many
WITH
    monthly AS (
        SELECT
            substr(date, 1, 6) AS month,
            sum(
                CASE
                    WHEN mood = '1' THEN 1
                    ELSE 0
                END
            ) AS mood1,
            sum(
                CASE
                    WHEN mood = '2' THEN 1
                    ELSE 0
                END
            ) AS mood2,
            sum(
                CASE
                    WHEN mood = '3' THEN 1
                    ELSE 0
                END
            ) AS mood3,
            sum(
                CASE
                    WHEN mood = '4' THEN 1
                    ELSE 0
                END
            ) AS mood4,
            sum(
                CASE
                    WHEN mood = '5' THEN 1
                    ELSE 0
                END
            ) AS mood5
        FROM diary
        WHERE
            uid = ?
        GROUP BY
            substr(date, 1, 6)
        ORDER BY month DESC
        LIMIT 6
    )
SELECT month, mood1, mood2, mood3, mood4, mood5
FROM monthly
ORDER BY month
`

type MonthlyMoodCountRow struct {
	Month string
	Mood1 sql.NullFloat64
	Mood2 sql.NullFloat64
	Mood3 sql.NullFloat64
	Mood4 sql.NullFloat64
	Mood5 sql.NullFloat64
}

func (q *Queries) MonthlyMoodCount(ctx context.Context, uid string) ([]MonthlyMoodCountRow, error) {
	rows, err := q.db.QueryContext(ctx, monthlyMoodCount, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonthlyMoodCountRow
	for rows.Next() {
		var i MonthlyMoodCountRow
		if err := rows.Scan(
			&i.Month,
			&i.Mood1,
			&i.Mood2,
			&i.Mood3,
			&i.Mood4,
			&i.Mood5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDiarys = `-- name: SearchDiarys :many
SELECT
    date,
    content
FROM diary
WHERE
    uid = ?
    AND content LIKE '%' || ? || '%'
ORDER BY date DESC
LIMIT 20
`

type SearchDiarysParams struct {
	Uid     string
	Column2 sql.NullString
}

type SearchDiarysRow struct {
	Date    string
	Content string
}

func (q *Queries) SearchDiarys(ctx context.Context, arg SearchDiarysParams) ([]SearchDiarysRow, error) {
	rows, err := q.db.QueryContext(ctx, searchDiarys, arg.Uid, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchDiarysRow
	for rows.Next() {
		var i SearchDiarysRow
		if err := rows.Scan(&i.Date, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiary = `-- name: UpdateDiary :one
UPDATE diary
SET
    content = ?,
    updated = datetime('now')
WHERE
    id = ? RETURNING id, uid, date, content, ai_feedback, ai_image, created, updated, mood, image_url1, image_url2, image_url3
`

type UpdateDiaryParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateDiary(ctx context.Context, arg UpdateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, updateDiary, arg.Content, arg.ID)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Date,
		&i.Content,
		&i.AiFeedback,
		&i.AiImage,
		&i.Created,
		&i.Updated,
		&i.Mood,
		&i.ImageUrl1,
		&i.ImageUrl2,
		&i.ImageUrl3,
	)
	return i, err
}

const updateDiaryImages = `-- name: UpdateDiaryImages :exec
UPDATE diary
SET
    image_url1 = ?,
    image_url2 = ?,
    image_url3 = ?,
    updated = datetime('now')
WHERE
    id = ?
`

type UpdateDiaryImagesParams struct {
	ImageUrl1 string
	ImageUrl2 string
	ImageUrl3 string
	ID        string
}

func (q *Queries) UpdateDiaryImages(ctx context.Context, arg UpdateDiaryImagesParams) error {
	_, err := q.db.ExecContext(ctx, updateDiaryImages,
		arg.ImageUrl1,
		arg.ImageUrl2,
		arg.ImageUrl3,
		arg.ID,
	)
	return err
}

const updateDiaryOfAiFeedback = `-- name: UpdateDiaryOfAiFeedback :exec
UPDATE diary
SET
    ai_feedback = ?,
    ai_image = ?,
    updated = datetime('now')
WHERE
    id = ?
`

type UpdateDiaryOfAiFeedbackParams struct {
	AiFeedback string
	AiImage    string
	ID         string
}

func (q *Queries) UpdateDiaryOfAiFeedback(ctx context.Context, arg UpdateDiaryOfAiFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, updateDiaryOfAiFeedback, arg.AiFeedback, arg.AiImage, arg.ID)
	return err
}

const updateDiaryOfMood = `-- name: UpdateDiaryOfMood :exec
UPDATE diary
SET
    mood = ?,
    updated = datetime('now')
WHERE
    id = ?
`

type UpdateDiaryOfMoodParams struct {
	Mood string
	ID   string
}

func (q *Queries) UpdateDiaryOfMood(ctx context.Context, arg UpdateDiaryOfMoodParams) error {
	_, err := q.db.ExecContext(ctx, updateDiaryOfMood, arg.Mood, arg.ID)
	return err
}

const upsertPushKey = `-- name: UpsertPushKey :exec
INSERT INTO
    user_setting (uid, push_token)
VALUES (?, ?)
ON CONFLICT (uid) DO
UPDATE
SET
    push_token = excluded.push_token,
    updated = datetime('now')
`

type UpsertPushKeyParams struct {
	Uid       string
	PushToken string
}

func (q *Queries) UpsertPushKey(ctx context.Context, arg UpsertPushKeyParams) error {
	_, err := q.db.ExecContext(ctx, upsertPushKey, arg.Uid, arg.PushToken)
	return err
}

const upsertUserSetting = `-- name: UpsertUserSetting :exec
INSERT INTO
    user_setting (
        uid,
        is_push,
        push_time,
        random_range
    )
VALUES (?, ?, ?, ?)
ON CONFLICT (uid) DO
UPDATE
SET
    is_push = excluded.is_push,
    push_time = excluded.push_time,
    random_range = excluded.random_range,
    updated = datetime('now')
`

type UpsertUserSettingParams struct {
	Uid         string
	IsPush      int64
	PushTime    string
	RandomRange int64
}

func (q *Queries) UpsertUserSetting(ctx context.Context, arg UpsertUserSettingParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserSetting,
		arg.Uid,
		arg.IsPush,
		arg.PushTime,
		arg.RandomRange,
	)
	return err
}
