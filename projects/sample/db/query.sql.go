// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT    INTO authors (name, bio, created, updated)
VALUES    (?, ?, datetime ('now'), datetime ('now')) RETURNING bio, created, id, name, updated
`

type CreateAuthorParams struct {
	Name string
	Bio  string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(
		&i.Bio,
		&i.Created,
		&i.ID,
		&i.Name,
		&i.Updated,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE    FROM authors
WHERE     id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT    bio, created, id, name, updated
FROM      authors
WHERE     id = ?
LIMIT     1
`

func (q *Queries) GetAuthor(ctx context.Context, id string) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.Bio,
		&i.Created,
		&i.ID,
		&i.Name,
		&i.Updated,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT    bio, created, id, name, updated
FROM      authors
ORDER BY  name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.Bio,
			&i.Created,
			&i.ID,
			&i.Name,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE    authors
set       name = ?,
          bio = ?,
          updated = datetime ('now')
WHERE     id = ? RETURNING bio, created, id, name, updated
`

type UpdateAuthorParams struct {
	Name string
	Bio  string
	ID   string
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.Name, arg.Bio, arg.ID)
	var i Author
	err := row.Scan(
		&i.Bio,
		&i.Created,
		&i.ID,
		&i.Name,
		&i.Updated,
	)
	return i, err
}
