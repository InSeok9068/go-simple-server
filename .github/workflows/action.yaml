name: Build Go Application

on:
  push:
    branches:
      - release

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Go 설치
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.1

      # 3. 필요한 패키지 설치 (GCC 등)
      - name: Install GCC Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential gcc-multilib

      # 4. Templ 패키지 설치
      - name: Install Templ Dependencies
        run: |
          export PATH=$PATH:$HOME/go/bin
          go install github.com/a-h/templ/cmd/templ@latest

      # 5. .env 파일 생성
      - name: Generate .env File
        run: |
          cat <<EOF > .env
            ENV=prod
            CHROMEDP_HEADLESS=true
            GEMINI_AI_KEY=${{ secrets.GEMINI_AI_KEY }}
            FIREBASE_CONFIG=${{ secrets.FIREBASE_CONFIG }}
          EOF

      # 6. Templ 실행
      - name: Templ Generate
        run: |
          templ generate

      # 7. Lint 실행
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

      # 8. 환경 변수 설정 및 빌드
      - name: Build for Linux
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w" -o ./main ./cmd/homepage

      # 9. 바이너리 압축
      - name: Compress Binary
        run: |
          tar -czvf main.tar.gz main

      # 10. SCP 파일 전송 (직접 SCP 사용)
      - name: Transfer File
        run: |
          echo -e "${{ secrets.REMOTE_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

          scp -o StrictHostKeyChecking=no -C -i ssh_key.pem -P 22 ./main.tar.gz ${{ secrets.REMOTE_ID }}@${{ secrets.REMOTE_IP }}:./app

          rm ssh_key.pem

      # # 10. SCP 파일 전송 (라이브 러리 사용) -> 속도 이슈
      # - name: Deploy File to Server
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.REMOTE_IP }}
      #     username: ${{ secrets.REMOTE_ID }}
      #     key: ${{ secrets.REMOTE_SSH_KEY }}
      #     port: 22
      #     source: ./main.tar.gz
      #     target: ./app

      # 11 SSH 명령어 실행
      - name: Restart Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            cd ./app
            tar -xzvf main.tar.gz
            chmod +x main
            rm main.tar.gz
            sudo systemctl restart main.service

      # 12-1. 빌드 성공 메세지 발송
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Repository: ${{ github.repository }}

            Author: ${{github.actor}}

            Status: 😚 **Success**

            Commit message: ${{ github.event.head_commit.message }}

            [See changes](https://github.com/${{ github.repository }}/commit/${{github.sha}})

      # 12-2. 빌드 실패 메세지 발송
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Repository: ${{ github.repository }}

            Author: ${{github.actor}}

            Status: 😱 **Failure**

            Commit message: ${{ github.event.head_commit.message }}

            [link](https://github.com/${{ github.repository }}/actions)
