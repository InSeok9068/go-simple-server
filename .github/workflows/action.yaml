name: Build Go Application

on:
  push:
    branches:
      - release/*

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. 서비스명 환경변수 저장
      - name: Extract Release Name
        run: echo "SERVICE_NAME=$(echo ${GITHUB_REF#refs/heads/release/})" >> $GITHUB_ENV

      # 3. .env 환경변수 파일 생성
      - name: Generate .env File
        run: |
          cat <<EOF > .env
            ENV=prod
            CHROMEDP_HEADLESS=true
            GEMINI_AI_KEY=${{ secrets.GEMINI_AI_KEY }}
            OPEN_AI_KEY=${{ secrets.OPEN_AI_KEY }}
            FIREBASE_CONFIG=${{ secrets.FIREBASE_CONFIG }}
            DEBUG_AUTH_PARAM=${{ secrets.DEBUG_AUTH_PARAM }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
          EOF

      # 4. Go 설치
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.25

      # 5. Tailwindcss CLI 설치
      - name: Install Tailwindcss CLI Dependencies
        run: |
          chmod +x ./task.sh
          ./task.sh install-tailwind linux

      # 6. Tailwindcss Out 파일 생성
      - name: Tailwindcss Generate
        run: |
          tailwind/tailwindcss -i tailwind/tailwindcss.css -o shared/static/tailwindcss.css  --minify

      # # 7. Lint 실행
      # - name: golangci-lint
      #   uses: golangci/golangci-lint-action@v6
      #   with:
      #     version: v1.60

      # 8. 환경 변수 설정 및 빌드
      - name: Build for Linux
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w" -o ./${SERVICE_NAME} ./cmd/${SERVICE_NAME}

      # 9. 바이너리 압축
      - name: Compress Binary
        run: |
          tar -czvf ${SERVICE_NAME}.tar.gz ${SERVICE_NAME}

      # 10. SCP 파일 전송 (직접 SCP 사용)
      - name: Transfer File
        run: |
          echo -e "${{ secrets.REMOTE_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

          scp -o StrictHostKeyChecking=no -C -i ssh_key.pem -P 22 ./${SERVICE_NAME}.tar.gz ${{ secrets.REMOTE_ID }}@${{ secrets.REMOTE_IP }}:./app

          rm ssh_key.pem

      # # 10. SCP 파일 전송 (라이브 러리 사용) -> 속도 이슈
      # - name: Deploy File to Server
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.REMOTE_IP }}
      #     username: ${{ secrets.REMOTE_ID }}
      #     key: ${{ secrets.REMOTE_SSH_KEY }}
      #     port: 22
      #     source: ./main.tar.gz
      #     target: ./app

      # 11 SSH 명령어 실행
      - name: Restart Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            cd ./app
            tar -xzvf ${SERVICE_NAME}.tar.gz
            chmod +x ${SERVICE_NAME}
            rm ${SERVICE_NAME}.tar.gz
            sudo systemctl restart ${SERVICE_NAME}.service

      # 12. 커밋 메시지 준비 (텔레그램 메시지 길이 제한 해결)
      - name: Prepare Commit Message
        id: prep_commit
        run: echo "commit_message=$(echo "${{ github.event.head_commit.message }}" | head -n 1 | cut -c -200)" >> $GITHUB_OUTPUT

      # 13-1. 빌드 성공 메세지 발송
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Status: 😚 **Success**

            Branch: ${{ github.ref_name }}

            Commit message: ${{ steps.prep_commit.outputs.commit_message }}

            [See changes](https://github.com/${{ github.repository }}/commit/${{github.sha}})

      # 13-2. 빌드 실패 메세지 발송
      - name: Send Build Failure Message
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Status: 😱 **Failure**

            Branch: ${{ github.ref_name }}

            Commit message: ${{ steps.prep_commit.outputs.commit_message }}

            [link](https://github.com/${{ github.repository }}/actions)

# Repository: ${{ github.repository }}
# Author: ${{github.actor}}
